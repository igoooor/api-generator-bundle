<?php
/**
 * Created by PhpStorm.
 * User: api-generator-bundle
 * Date: {{ "now"|date('d.m.Y') }}
 * Time: {{ "now"|date('H:i') }}
 */

namespace {{ controllerNamespace }};

use {{ entityFqcn }};
{% if overrides['findAll'] -%}
use {{ repositoryFqcn }};
{% endif -%}
{% for crudEvent, enabled in crudEvents -%}
{%- if enabled -%}
use {{ bundleName }}Event\{{ entityName }}\{{ entityName }}{{ crudEvent }};
{% endif -%}
{% endfor -%}
{% if methods['new'] or methods['update'] -%}
use {{ entityNamespace|replace({'Entity': 'Form\\Type'}) }}\{{ entityName }}Type;
{% endif -%}
{% if overrides['persistEntity'] or overrides['updateEntity'] or overrides['deleteEntity'] -%}
use Doctrine\ORM\ORMException;
{% endif -%}
{% if overrides['findAll'] -%}
use Doctrine\ORM\QueryBuilder;
{% endif -%}
use Igoooor\ApiBundle\Controller\AbstractCrudController;
use Igoooor\ApiBundle\Crud\Crud;
{% if overrides['getEntity'] or overrides['deleteEntity'] or overrides['persistEntity'] or overrides['updateEntity'] -%}
use Igoooor\ApiBundle\Crud\Exception\InvalidCrudRepositoryException;
{% endif -%}
{% if overrides['findAll'] -%}
use Igoooor\ApiBundle\Repository\AbstractRepository;
{% endif -%}
{% if overrides['findAll'] or overrides['getSerializerGroups'] -%}
use Symfony\Component\HttpFoundation\Request;
{% endif -%}
use Symfony\Component\Routing\Annotation\Route;

/**
 * Class {{ controllerName }}
 *
 * @Route("/{{ routePath }}", name="_{{ routeName }}")
 */
class {{ controllerName }} extends AbstractCrudController
{
    /**
     * @inheritDoc
     */
    protected function configureCrud(Crud $crud): Crud
    {
        return $crud
            ->setEntityFqcn({{ entityName }}::class)
            ->setDefaultRole('{{ defaultRole }}')
            //->pagination(0, 0)
            {% for method, role in roles -%}
            {%- if role != defaultRole -%}
                ->{{ method }}Role('{{ role }}')
            {% endif -%}
            {% endfor -%}
            {% for method, enabled in methods -%}
            {%- if not enabled -%}
                ->disable{{ method|capitalize }}()
            {% endif -%}
            {% endfor -%}
            {% if methods['new'] -%}
                ->setNewFormFqcn({{ entityName }}Type::class)
            {% endif -%}
            {% if methods['update'] -%}
                ->setUpdateFormFqcn({{ entityName }}Type::class)
            {% endif -%}
            {% if softDelete -%}
                ->softDelete()
            {% endif -%}
            {% for crudEvent, enabled in crudEvents -%}
            {%- if enabled -%}
                ->set{{ crudEvent }}Fqcn({{ entityName }}{{ crudEvent }}::class)
            {% endif -%}
            {% endfor -%}
        ;
    }
{% if overrides['findAll'] %}

    /**
    * @param Request            $request
    * @param {{ entityName }}Repository|AbstractRepository $repository
    *
    * @return array|QueryBuilder
    */
    protected function findAll(Request $request, AbstractRepository $repository)
    {
        return $repository->findAll();
    }
{% endif %}
{% if overrides['getSerializerGroups'] %}

    /**
    * @param Request $request
    * @param string  $crudAction
    *
    * @return array
    */
    protected function getSerializerGroups(Request $request, string $crudAction): array
    {
        return parent::getSerializerGroups($request, $crudAction);
    }
{% endif %}
{% if overrides['getEntity'] %}

    /**
     * @param string $entityId
     *
     * @return object
     *
     * @throws InvalidCrudRepositoryException
     */
    private function getEntity(string $entityId): object
    {
        // TODO: Change the autogenerated stub
    }
{% endif %}
{% if overrides['createEntity'] %}

    /**
     * @param string $entityFqcn
     *
     * @return object
     */
    protected function createEntity(string $entityFqcn): object
    {
        return new $entityFqcn();
    }
{% endif %}
{% if overrides['persistEntity'] %}

    /**
     * @param mixed $entity
     *
     * @throws ORMException
     * @throws InvalidCrudRepositoryException
     */
    protected function persistEntity($entity): void
    {
        $this->getRepository()->persist($entity);
    }
{% endif %}
{% if overrides['updateEntity'] %}

    /**
     * @param mixed $entity
     *
     * @throws ORMException
     * @throws InvalidCrudRepositoryException
     */
    protected function updateEntity($entity): void
    {
        $this->getRepository()->persist($entity);
    }
{% endif %}
{% if overrides['deleteEntity'] %}

    /**
     * @param mixed $entity
     * @param Crud  $crud
     *
     * @throws ORMException
     * @throws InvalidCrudRepositoryException
     */
    protected function deleteEntity($entity, Crud $crud): void
    {
        if (!$crud->isSoftDelete()) {
            $this->getRepository()->remove($entity);

            return;
        }

        $this->softDeleteEntity($entity, $crud);
    }
{% endif %}
}
